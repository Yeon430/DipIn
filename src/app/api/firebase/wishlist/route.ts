import { NextRequest, NextResponse } from 'next/server'
import { db } from '@/lib/firebase'
import { doc, getDoc, setDoc, deleteDoc, collection, query, where, getDocs } from 'firebase/firestore'

// GET /api/firebase/wishlist?userId=xxx
export async function GET(request: NextRequest) {
  try {
    const { searchParams } = new URL(request.url)
    const userId = searchParams.get('userId')

    if (!userId) {
      return NextResponse.json({ error: 'User ID is required' }, { status: 400 })
    }

    // FirestoreÏóêÏÑú ÏÇ¨Ïö©ÏûêÏùò ÏúÑÏãúÎ¶¨Ïä§Ìä∏ Í∞ÄÏ†∏Ïò§Í∏∞
    const wishlistRef = collection(db, 'wishlist')
    const q = query(wishlistRef, where('userId', '==', userId))
    const querySnapshot = await getDocs(q)
    
    const wishlistItems = []
    console.log('üìã Raw wishlist docs:', querySnapshot.docs.length)
    
    for (const docSnapshot of querySnapshot.docs) {
      const data = docSnapshot.data()
      console.log('üìÑ Wishlist item data:', { 
        id: docSnapshot.id, 
        data,
        projectId: data.projectId,
        userId: data.userId
      })
      
      // ÌîÑÎ°úÏ†ùÌä∏ Ï†ïÎ≥¥ÎèÑ Ìï®Íªò Í∞ÄÏ†∏Ïò§Í∏∞
      const projectRef = doc(db, 'projects', data.projectId)
      const projectDoc = await getDoc(projectRef)
      
      if (projectDoc.exists()) {
        const projectData = projectDoc.data()
        const wishlistItem = {
          id: docSnapshot.id,
          projectId: data.projectId,
          userId: data.userId,
          addedAt: data.addedAt,
          project: projectData
        }
        console.log('‚úÖ Added wishlist item:', { 
          projectId: wishlistItem.projectId, 
          userId: wishlistItem.userId,
          projectTitle: projectData?.title || 'No title',
          projectExists: true
        })
        wishlistItems.push(wishlistItem)
      } else {
        console.log('‚ùå Project not found in Firestore:', { 
          projectId: data.projectId,
          userId: data.userId,
          addedAt: data.addedAt
        })
        // ÌîÑÎ°úÏ†ùÌä∏Í∞Ä ÏóÜÏñ¥ÎèÑ ÏúÑÏãúÎ¶¨Ïä§Ìä∏ ÏïÑÏù¥ÌÖúÏùÄ Ï∂îÍ∞Ä
        const wishlistItem = {
          id: docSnapshot.id,
          projectId: data.projectId,
          userId: data.userId,
          addedAt: data.addedAt,
          project: null
        }
        wishlistItems.push(wishlistItem)
      }
    }

    console.log('üì§ Returning wishlist:', { 
      count: wishlistItems.length, 
      projectIds: wishlistItems.map(item => item.projectId),
      allProjectIds: wishlistItems.map(item => `"${item.projectId}"`).join(', '),
      items: wishlistItems.map(item => ({ id: item.id, projectId: item.projectId, userId: item.userId }))
    })
    
    return NextResponse.json({ wishlist: wishlistItems })
  } catch (error) {
    console.error('Error fetching wishlist:', error)
    return NextResponse.json({ error: 'Failed to fetch wishlist' }, { status: 500 })
  }
}

// POST /api/firebase/wishlist
export async function POST(request: NextRequest) {
  try {
    const { userId, projectId } = await request.json()
    console.log('üì° Wishlist POST API called:', { userId, projectId })

    if (!userId || !projectId) {
      console.log('‚ùå Missing required fields')
      return NextResponse.json({ error: 'User ID and Project ID are required' }, { status: 400 })
    }

    // Ï§ëÎ≥µ ÌôïÏù∏
    const wishlistRef = collection(db, 'wishlist')
    const q = query(wishlistRef, where('userId', '==', userId), where('projectId', '==', projectId))
    const querySnapshot = await getDocs(q)
    
    if (!querySnapshot.empty) {
      console.log('‚ö†Ô∏è Project already in wishlist:', { userId, projectId })
      return NextResponse.json({ 
        error: 'Project already in wishlist',
        success: false,
        message: 'This project is already in your wishlist'
      }, { status: 409 }) // 409 Conflict status code
    }

    // ÏúÑÏãúÎ¶¨Ïä§Ìä∏Ïóê Ï∂îÍ∞Ä
    const newWishlistRef = doc(collection(db, 'wishlist'))
    await setDoc(newWishlistRef, {
      userId,
      projectId,
      addedAt: new Date().toISOString()
    })

    return NextResponse.json({ 
      success: true, 
      id: newWishlistRef.id,
      message: 'Project added to wishlist' 
    })
  } catch (error) {
    console.error('Error adding to wishlist:', error)
    return NextResponse.json({ error: 'Failed to add to wishlist' }, { status: 500 })
  }
}

// DELETE /api/firebase/wishlist
export async function DELETE(request: NextRequest) {
  try {
    const { userId, projectId } = await request.json()

    if (!userId || !projectId) {
      return NextResponse.json({ error: 'User ID and Project ID are required' }, { status: 400 })
    }

    // ÏúÑÏãúÎ¶¨Ïä§Ìä∏ÏóêÏÑú Ï†úÍ±∞
    const wishlistRef = collection(db, 'wishlist')
    const q = query(wishlistRef, where('userId', '==', userId), where('projectId', '==', projectId))
    const querySnapshot = await getDocs(q)
    
    if (querySnapshot.empty) {
      return NextResponse.json({ error: 'Project not found in wishlist' }, { status: 404 })
    }

    // Ï≤´ Î≤àÏß∏ Îß§Ïπ≠ Î¨∏ÏÑú ÏÇ≠Ï†ú
    const docToDelete = querySnapshot.docs[0]
    await deleteDoc(docToDelete.ref)

    return NextResponse.json({ 
      success: true, 
      message: 'Project removed from wishlist' 
    })
  } catch (error) {
    console.error('Error removing from wishlist:', error)
    return NextResponse.json({ error: 'Failed to remove from wishlist' }, { status: 500 })
  }
}



